package models

import (
	"bytes"
	"time"

	getTag "github.com/Park-Kwonsoo/moving-server/pkg/get-struct-info"
)

var TRIGGER_FUNCTION string = "update_at()"

type baseType struct {
	ID        uint      `db:"id int generated by default as identity primary key"`
	CreatedAt time.Time `db:"created_at timestamp not null default now()"`
	UpdatedAt time.Time `db:"updated_at timestamp not null default now()"`
	DeletedAt time.Time `db:"deleted_at timestamp default null"`
	UseYn     string    `db:"use_yn varchar(2) default 'Y'"`
}

//BaseType의 create table시 사용할 컬럼 옵션 리턴
func getCreatedTableColumn() []string {

	column := make([]string, 0)
	column = append(column, getTag.GetStructInfoByTag("db", &baseType{})...)

	return column
}

/*
*	psql create updated_at trigger function
 */
func createUpdateFunction() error {
	var b bytes.Buffer
	b.WriteString("CREATE OR REPLACE FUNCTION")
	b.WriteString(" ")
	b.WriteString(TRIGGER_FUNCTION)
	b.WriteString(" ")
	b.WriteString("RETURNS TRIGGER AS $$")
	b.WriteString(" ")
	b.WriteString("BEGIN")
	b.WriteString(" ")
	b.WriteString("NEW.updated_at = NOW();")
	b.WriteString("RETURN NEW;")
	b.WriteString("END;")
	b.WriteString("$$ LANGUAGE 'plpgsql';")

	_, err := psql.Exec(b.String())
	return err
}

func createUpdateTrigger(t string) error {
	var b bytes.Buffer
	b.WriteString("DROP TRIGGER IF EXISTS update_timestamp ON")
	b.WriteString(" ")
	b.WriteString(t)
	b.WriteString(";")

	b.WriteString("CREATE TRIGGER update_timestamp BEFORE INSERT OR UPDATE ON")
	b.WriteString(" ")
	b.WriteString(t)
	b.WriteString(" ")
	b.WriteString("FOR EACH ROW EXECUTE PROCEDURE")
	b.WriteString(" ")
	b.WriteString(TRIGGER_FUNCTION)
	b.WriteString(";")

	_, err := psql.Exec(b.String())

	return err
}
