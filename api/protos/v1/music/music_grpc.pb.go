// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: api/protos/v1/music/music.proto

package music

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicServiceClient is the client API for MusicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServiceClient interface {
	//한 곡의 상세 정보를 가져옴
	GetMusicDetail(ctx context.Context, in *GetMusicDetailReq, opts ...grpc.CallOption) (*GetMusicDetailRes, error)
	//키워드를 바탕으로 일치하는 키워드를 가진 곡의 정보를 가져옴
	GetMusicByKeyword(ctx context.Context, in *GetMusicByKeywordReq, opts ...grpc.CallOption) (*GetMusicByKeywordRes, error)
	//새로운 음악 파일을 등록함 : 관리자만 사용 가능
	AddNewMusic(ctx context.Context, opts ...grpc.CallOption) (MusicService_AddNewMusicClient, error)
	//새로운 앨범을 등록함 : 관리자만 사용 가능
	AddNewAlbum(ctx context.Context, opts ...grpc.CallOption) (MusicService_AddNewAlbumClient, error)
}

type musicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServiceClient(cc grpc.ClientConnInterface) MusicServiceClient {
	return &musicServiceClient{cc}
}

func (c *musicServiceClient) GetMusicDetail(ctx context.Context, in *GetMusicDetailReq, opts ...grpc.CallOption) (*GetMusicDetailRes, error) {
	out := new(GetMusicDetailRes)
	err := c.cc.Invoke(ctx, "/v1.music_proto.MusicService/GetMusicDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) GetMusicByKeyword(ctx context.Context, in *GetMusicByKeywordReq, opts ...grpc.CallOption) (*GetMusicByKeywordRes, error) {
	out := new(GetMusicByKeywordRes)
	err := c.cc.Invoke(ctx, "/v1.music_proto.MusicService/GetMusicByKeyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) AddNewMusic(ctx context.Context, opts ...grpc.CallOption) (MusicService_AddNewMusicClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicService_ServiceDesc.Streams[0], "/v1.music_proto.MusicService/AddNewMusic", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicServiceAddNewMusicClient{stream}
	return x, nil
}

type MusicService_AddNewMusicClient interface {
	Send(*AddNewMusicReq) error
	CloseAndRecv() (*AddNewMusicRes, error)
	grpc.ClientStream
}

type musicServiceAddNewMusicClient struct {
	grpc.ClientStream
}

func (x *musicServiceAddNewMusicClient) Send(m *AddNewMusicReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *musicServiceAddNewMusicClient) CloseAndRecv() (*AddNewMusicRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddNewMusicRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *musicServiceClient) AddNewAlbum(ctx context.Context, opts ...grpc.CallOption) (MusicService_AddNewAlbumClient, error) {
	stream, err := c.cc.NewStream(ctx, &MusicService_ServiceDesc.Streams[1], "/v1.music_proto.MusicService/AddNewAlbum", opts...)
	if err != nil {
		return nil, err
	}
	x := &musicServiceAddNewAlbumClient{stream}
	return x, nil
}

type MusicService_AddNewAlbumClient interface {
	Send(*AddNewAlbumReq) error
	CloseAndRecv() (*AddNewAlbumRes, error)
	grpc.ClientStream
}

type musicServiceAddNewAlbumClient struct {
	grpc.ClientStream
}

func (x *musicServiceAddNewAlbumClient) Send(m *AddNewAlbumReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *musicServiceAddNewAlbumClient) CloseAndRecv() (*AddNewAlbumRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddNewAlbumRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MusicServiceServer is the server API for MusicService service.
// All implementations must embed UnimplementedMusicServiceServer
// for forward compatibility
type MusicServiceServer interface {
	//한 곡의 상세 정보를 가져옴
	GetMusicDetail(context.Context, *GetMusicDetailReq) (*GetMusicDetailRes, error)
	//키워드를 바탕으로 일치하는 키워드를 가진 곡의 정보를 가져옴
	GetMusicByKeyword(context.Context, *GetMusicByKeywordReq) (*GetMusicByKeywordRes, error)
	//새로운 음악 파일을 등록함 : 관리자만 사용 가능
	AddNewMusic(MusicService_AddNewMusicServer) error
	//새로운 앨범을 등록함 : 관리자만 사용 가능
	AddNewAlbum(MusicService_AddNewAlbumServer) error
	mustEmbedUnimplementedMusicServiceServer()
}

// UnimplementedMusicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicServiceServer struct {
}

func (UnimplementedMusicServiceServer) GetMusicDetail(context.Context, *GetMusicDetailReq) (*GetMusicDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusicDetail not implemented")
}
func (UnimplementedMusicServiceServer) GetMusicByKeyword(context.Context, *GetMusicByKeywordReq) (*GetMusicByKeywordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusicByKeyword not implemented")
}
func (UnimplementedMusicServiceServer) AddNewMusic(MusicService_AddNewMusicServer) error {
	return status.Errorf(codes.Unimplemented, "method AddNewMusic not implemented")
}
func (UnimplementedMusicServiceServer) AddNewAlbum(MusicService_AddNewAlbumServer) error {
	return status.Errorf(codes.Unimplemented, "method AddNewAlbum not implemented")
}
func (UnimplementedMusicServiceServer) mustEmbedUnimplementedMusicServiceServer() {}

// UnsafeMusicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServiceServer will
// result in compilation errors.
type UnsafeMusicServiceServer interface {
	mustEmbedUnimplementedMusicServiceServer()
}

func RegisterMusicServiceServer(s grpc.ServiceRegistrar, srv MusicServiceServer) {
	s.RegisterService(&MusicService_ServiceDesc, srv)
}

func _MusicService_GetMusicDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusicDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetMusicDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.music_proto.MusicService/GetMusicDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetMusicDetail(ctx, req.(*GetMusicDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_GetMusicByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusicByKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetMusicByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.music_proto.MusicService/GetMusicByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetMusicByKeyword(ctx, req.(*GetMusicByKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_AddNewMusic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MusicServiceServer).AddNewMusic(&musicServiceAddNewMusicServer{stream})
}

type MusicService_AddNewMusicServer interface {
	SendAndClose(*AddNewMusicRes) error
	Recv() (*AddNewMusicReq, error)
	grpc.ServerStream
}

type musicServiceAddNewMusicServer struct {
	grpc.ServerStream
}

func (x *musicServiceAddNewMusicServer) SendAndClose(m *AddNewMusicRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *musicServiceAddNewMusicServer) Recv() (*AddNewMusicReq, error) {
	m := new(AddNewMusicReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MusicService_AddNewAlbum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MusicServiceServer).AddNewAlbum(&musicServiceAddNewAlbumServer{stream})
}

type MusicService_AddNewAlbumServer interface {
	SendAndClose(*AddNewAlbumRes) error
	Recv() (*AddNewAlbumReq, error)
	grpc.ServerStream
}

type musicServiceAddNewAlbumServer struct {
	grpc.ServerStream
}

func (x *musicServiceAddNewAlbumServer) SendAndClose(m *AddNewAlbumRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *musicServiceAddNewAlbumServer) Recv() (*AddNewAlbumReq, error) {
	m := new(AddNewAlbumReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MusicService_ServiceDesc is the grpc.ServiceDesc for MusicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.music_proto.MusicService",
	HandlerType: (*MusicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMusicDetail",
			Handler:    _MusicService_GetMusicDetail_Handler,
		},
		{
			MethodName: "GetMusicByKeyword",
			Handler:    _MusicService_GetMusicByKeyword_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddNewMusic",
			Handler:       _MusicService_AddNewMusic_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddNewAlbum",
			Handler:       _MusicService_AddNewAlbum_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/protos/v1/music/music.proto",
}
